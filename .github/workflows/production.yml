name: production

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker Build
        run: docker build --tag tracer1337/discord-bot:discord-bot .

      - name: Docker Push
        run: |
          docker login --username tracer1337 --password ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          docker push tracer1337/discord-bot:discord-bot

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker Pull
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker login --username tracer1337 --password ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
            docker rmi -f tracer1337/discord-bot:discord-bot
            docker pull tracer1337/discord-bot:discord-bot
          
      - name: Docker Run
        uses: appleboy/ssh-action@v0.1.4
        env:
          HOST: v2202104145753149514.ultrasrv.de
          PUBLIC_PORT: 4000
          PROTOCOL: http
          PORT: 8300
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: HOST,PUBLIC_PORT,PROTOCOL,PORT
          script: |
            docker rm -f discord-bot
            docker run --name discord-bot --detach --publish $PORT:8080 --volume discord-bot:/etc/storage --network discord-bot --restart always  --env DISCORD_BOT_TOKEN=${{ secrets.DISCORD_BOT_TOKEN }} --env DISCORD_API_CLIENT_ID=${{ secrets.DISCORD_API_CLIENT_ID }} --env DISCORD_API_CLIENT_SECRET=${{ secrets.DISCORD_API_CLIENT_SECRET }} --env JWT_SECRET=${{ secrets.JWT_SECRET }} --env ADMIN_USER_IDS=${{ secrets.ADMIN_USER_IDS }} --env HOST --env PUBLIC_PORT --env PROTOCOL tracer1337/discord-bot:discord-bot
